{"pageProps":{"title":"AWS Dynamic DNS","slug":"aws-ddns","date":"March 20, 2022","excerpt":"A dynamic DNS is handy if you want to host something or access something on your home network but you don't have a static IP address from your ISP. I built a little dynamic DNS script for AWS Route53 using Node that runs on a Raspberry Pi.","hero":"/images/posts/aws-ddns.jpg","tags":["aws","ddns","node","raspberry-pi"],"content":"# AWS Dynamic DNS\n#### March 20, 2022\nThis is a Dynamic DNS system built using AWS Route53 and a Node script running on a Raspberry Pi.\n\n![](./aws-ddns.jpg)\n\n## Index\n* [What is a DDNS?](#what-is-a-ddns)\n* [Prerequisites](#prerequisites)\n* [Getting your current IP](#getting-your-current-ip)\n* [Get the IP address from your DNS record to check if it needs to be updated](#get-the-ip-address-from-your-dns-record-to-check-if-it-needs-to-be-updated)\n* [Update IP in DNS record](#update-ip-in-dns-record)\n* [Run the script on a schedule](#run-the-script-on-a-schedule)\n* [Resources](#resources)\n\n## What is a DDNS?\nA dynamic DNS is handy if you want to host or access things on your home network from the internet but you don't have a static IP address from your service provider.\n\nEssentially what it does is update the IP address for a given DNS record to be the current public IP address of the machine running the script.\n\nSo for example, if you want to have a domain name always pointing to your home network, you run this script on a machine within your home network.\n\nLet's say your domain is `example.com`, you could create an A record for `home.example.com` that points to your home network. You could manually check what your current public IP address is and set it in the AWS console. But likely you have a dynamic IP at home, and it may randomly change at any moment, breaking your DNS record.\n\nLet's automate updating it\n\n## Prerequisites\nYou'll need:\n* An AWS account\n\t* With credentials set up in your environment of choice\n* A domain and hosted zone set up in Route53\n* Node installed\n* AWS-SDK node package\n* Some kind of machine running in your network of choice that will be always on so that it can run the script on a regular schedule. I use a Raspberry Pi as it's low power, easy to setup, and tiny.\n\nFirst setup your project. I used NPM to init a new project, then added the `aws-sdk` and `node-fetch` packages. Also add `\"type\": \"module\"` to your _package.json_ so node doesn't yell at you for using `import`.\n\n## Getting your current IP\nThere are many ways to do this. A trivial way that I chose is to use a service provided by AWS [checkip.amazonaws.com](http://checkip.amazonaws.com). Simply fetch that URL and trim the result to get your current public IP address.\n\nIt's probably a good idea to be validating the IP address returned is a valid IPV4 format. I make a simple helper function to validate an IP address\n\n```javascript\nimport fetch from \"node-fetch\";\n\nfunction validateIp(ipString) {\n\tconst re = /^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$/;\n\treturn !!ipString.match(re);\n}\n\nasync function getCurrentIp() {\n\tconsole.log(\"Fetching current ip...\");\n\tconst response = await fetch(\"http://checkip.amazonaws.com/\");\n\tconst ip = (await response.text()).trim();\n\tif (validateIp(ip)) {\n\t\tconsole.log(ip);\n\t\treturn ip;\n\t}\n\tconsole.error(\"Fetching ip failed\");\n\treturn false\n}\n\nasync function main() {\n\tconst ip = await getCurrentIp();\n\tif (!ip) {\n\t\treturn 1;\n\t}\n}\n\nmain();\n```\n\n## Get the IP address from your DNS record to check if it needs to be updated\n\nThis maybe isn't actually necessary. You're really just making a call to save yourself from making a call. But if this script got more complicated this might be a better idea.\n\nCheck out the [AWS Node SDK Docs](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/getting-started-nodejs.html) and the [AWS JavaScript Route53 SDK Docs](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Route53.html) for more details on their usage.\n\nI made a function  `getIpFromDnsRecord` that fetches the current IP address from the A record of the given hostname and hosted zone id.\n\n```javascript\nimport fetch from \"node-fetch\";\nimport AWS from \"aws-sdk\";\n\nconst hostedZoneId = \"GETTHISIDFROMYOURAWSCONSOLE\";\nconst hostname = \"home.yourdomain.com\";\n\nconst route53 = new AWS.Route53({ apiVersion: \"2013-04-01\" });\n\nfunction validateIp(ipString) {\n\tconst re = /^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$/;\n\treturn !!ipString.match(re);\n}\n\nasync function getIpFromDnsRecord() {\n\tconsole.log(`Fetching ip currently set for ${hostname}...`);\n\tconst params = {\n\t\tHostedZoneId: hostedZoneId,\n\t\tStartRecordName: hostname,\n\t\tStartRecordType: \"A\",\n\t\tMaxItems: \"2\"\n\t}\n\tconst recordSets = await route53.listResourceRecordSets(params).promise()\n\tfor (let record of recordSets[\"ResourceRecordSets\"]) {\n\t\tif (record[\"Name\"] == hostname + \".\") {\n\t\t\tif (record[\"ResourceRecords\"].length == 1) {\n\t\t\t\tconst ip = record[\"ResourceRecords\"][0][\"Value\"].trim();\n\t\t\t\tif (validateIp(ip)) {\n\t\t\t\t\tconsole.log(ip);\n\t\t\t\t\treturn ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tconsole.error(`Fetching ip for hostname ${hostname} failed`)\n\treturn false;\n}\n\nasync function getCurrentIp() {\n\tconsole.log(\"Fetching current ip...\");\n\tconst response = await fetch(\"http://checkip.amazonaws.com/\");\n\tconst ip = (await response.text()).trim();\n\tif (validateIp(ip)) {\n\t\tconsole.log(ip);\n\t\treturn ip;\n\t}\n\tconsole.error(\"Fetching ip failed\");\n\treturn false\n}\n\nasync function main() {\n\tconst ip = await getCurrentIp();\n\tif (!ip) {\n\t\treturn 1;\n\t}\n\n\tconst previousIp = await getIpFromDnsRecord();\n\tif (!previousIp) {\n\t\treturn 1;\n\t}\n\n\tif (ip == previousIp) {\n\t\tconsole.log(\"Ip hasn't changed. No action required\")\n\t} else {\n\t\tconsole.log(\"Ip address has changed!\")\n\t}\n\t\n\treturn 0;\n}\n\nmain();\n```\n\n## Update IP in DNS record\nIf the current public IP address is different than the one set in your DNS record, you'll want to update it!\n\nI made a function `setIpInDnsRecord(ip)` that will update the DNS record in Route53.\n\n```javascript\nimport fetch from \"node-fetch\";\nimport AWS from \"aws-sdk\";\n\nconst hostedZoneId = \"GETTHISIDFROMYOURAWSCONSOLE\";\nconst hostname = \"home.yourdomain.com\";\n\nconst route53 = new AWS.Route53({ apiVersion: \"2013-04-01\" });\n\nfunction validateIp(ipString) {\n\tconst re = /^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$/;\n\treturn !!ipString.match(re);\n}\n\nasync function setIpInDnsRecord(ip) {\n\tconsole.log(`Updating DNS record for ${hostname} to ${ip}...`);\n\tconst date = new Date();\n\tconst params = {\n\t\tChangeBatch: {\n\t\t\tChanges: [{\n\t\t\t\tAction: \"UPSERT\", // this will update an existing record\n\t\t\t\tResourceRecordSet: {\n\t\t\t\t\tName: hostname,\n\t\t\t\t\tResourceRecords: [\n\t\t\t\t\t\t{ Value: ip }\n\t\t\t\t\t],\n\t\t\t\t\tTTL: 300,\n\t\t\t\t\tType: \"A\"\n\t\t\t\t}\n\t\t\t}],\n\t\t\tComment: `Updated IP address on ${date.toString()}`\n\t\t},\n\t\tHostedZoneId: hostedZoneId\n\t};\n\tconst response = await route53.changeResourceRecordSets(params).promise();\n\t// missing any error handling\n\tconsole.log(`DNS record for ${hostname} updated to ${ip}. Can take up to 60s to propogate`);\n}\n\nasync function getIpFromDnsRecord() {\n\tconsole.log(`Fetching ip currently set for ${hostname}...`);\n\tconst params = {\n\t\tHostedZoneId: hostedZoneId,\n\t\tStartRecordName: hostname,\n\t\tStartRecordType: \"A\",\n\t\tMaxItems: \"2\"\n\t}\n\tconst recordSets = await route53.listResourceRecordSets(params).promise()\n\tfor (let record of recordSets[\"ResourceRecordSets\"]) {\n\t\tif (record[\"Name\"] == hostname + \".\") {\n\t\t\tif (record[\"ResourceRecords\"].length == 1) {\n\t\t\t\tconst ip = record[\"ResourceRecords\"][0][\"Value\"].trim();\n\t\t\t\tif (validateIp(ip)) {\n\t\t\t\t\tconsole.log(ip);\n\t\t\t\t\treturn ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tconsole.error(`Fetching ip for hostname ${hostname} failed`)\n\treturn false;\n}\n\nasync function getCurrentIp() {\n\tconsole.log(\"Fetching current ip...\");\n\tconst response = await fetch(\"http://checkip.amazonaws.com/\");\n\tconst ip = (await response.text()).trim();\n\tif (validateIp(ip)) {\n\t\tconsole.log(ip);\n\t\treturn ip;\n\t}\n\tconsole.error(\"Fetching ip failed\");\n\treturn false\n}\n\nasync function main() {\n\tconst ip = await getCurrentIp();\n\tif (!ip) {\n\t\treturn 1;\n\t}\n\n\tconst previousIp = await getIpFromDnsRecord();\n\tif (!previousIp) {\n\t\treturn 1;\n\t}\n\n\tif (ip == previousIp) {\n\t\tconsole.log(\"Ip hasn't changed. No action required\")\n\t} else {\n\t\tconsole.log(\"Ip address has changed!\")\n\t\tawait setIpInDnsRecord(ip);\n\t}\n\t\n\treturn 0;\n}\n\nmain();\n```\n\nAnd that's about it for the script! You could make this simpler or more complex as you see fit.\n\nTry it out by running the script\n\n```bash\nnode script.js\n```\n\n## Run the script on a schedule\nI am running this on a Raspberry Pi running the Raspberry Pi OS. This should be similar to any Linux environment (I think? ü§∑üèª‚Äç‚ôÇÔ∏è).\n\nI used a cron to schedule the node script. Open your cron schedules with\n```bash\ncrontab -e\n```\n\nAdd a new schedule for your script. Google cron syntax if you're unfamiliar. I set mine to trigger ever 10 minutes.\n\n```crontab\n*/10 * * * * node /home/YOURUSERNAME/path/to/script.js\n```\n\nSave that file with the new entry at the bottom.\n\nNow just restart your machine and the cron should take effect.\n\nAs long as the device remains powered on and running inside your network, your DNS record will remain updated with your current IP address!\n\n## Resources\n*  [AWS Node SDK Docs](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/getting-started-nodejs.html)\n*  [AWS JavaScript Route53 SDK Docs](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Route53.html)\n* [AWS DDNS Example](https://github.com/awslabs/route53-dynamic-dns-with-lambda/blob/master/v1/dynamic_dns_lambda.py)\n* [Crons on Raspberry Pi](https://bc-robotics.com/tutorials/setting-cron-job-raspberry-pi/)\n* [DDNS Example from Anthony Heddings](https://gist.github.com/anthonyheddings/f22967967bbf524ed510c356678b2651)"},"__N_SSG":true}